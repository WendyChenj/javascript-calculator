[{"/Users/wenjiechen/Downloads/react-projects/javascript-calculator/src/reportWebVitals.js":"1","/Users/wenjiechen/Downloads/react-projects/javascript-calculator/src/App.js":"2","/Users/wenjiechen/Downloads/react-projects/javascript-calculator/src/utils.js":"3","/Users/wenjiechen/Downloads/react-projects/javascript-calculator/src/index.js":"4"},{"size":362,"mtime":1608307144362,"results":"5","hashOfConfig":"6"},{"size":6672,"mtime":1608494112296,"results":"7","hashOfConfig":"6"},{"size":652,"mtime":1608350849207,"results":"8","hashOfConfig":"6"},{"size":500,"mtime":1608307144361,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1qvuzub",{"filePath":"12","messages":"13","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"/Users/wenjiechen/Downloads/react-projects/javascript-calculator/src/reportWebVitals.js",[],"/Users/wenjiechen/Downloads/react-projects/javascript-calculator/src/App.js",["20","21","22","23","24","25","26","27","28"],"import React, { useState, useEffect } from 'react';\n\nimport { numbers, operators } from './utils';\nimport './App.css';\n\n\nfunction App() {\n\n  const [ displayFormula, setDisplayFormula ] = useState(\"0\");\n  const [ resultFormula, setResultFormula ] = useState(\"\");\n  const [ inputValue, setInputValue ] = useState(\"0\");\n  const [ calValue, setCalValue ] = useState(0);\n  const [ isResult, setIsResult ] = useState(false);\n\n  // regular expressions methods accept strings as parameters.\n\n  // quantifier: \n  // x* : matches the preceeding item x 0 or more times. [matches \\d 0 or more times]\n  // x?: matches the preceeding item 0 or 1 times. [matches \\d* 0 or 1 time]\n  // x*?: stop finding as long as it finds a match. [stop searching as long as it finds a number in \\d]\n  // (x): capturing group: matches x and remembers the match. [matches 0 or multtiple 0s]\n  // $: the end of input\n  // ^: the start of input\n\n  const beginWithNegativeSign = /^-\\d*\\.?/;\n  const formulaHasOperator = /\\d+([\\*\\/\\+\\-\\=])\\d*/;\n  const formulaEndWithOperator = /[\\*\\/\\+\\-]$/;\n\n  // perform operations\n  const handleCalculation = (event, oper) => {\n    event.preventDefault();\n    handleClearInput();\n    const nextValue = parseFloat(inputValue);\n    let newCalValue = parseFloat(calValue);\n    let match = \"\";\n\n    // if before the operator, there is a operator, check if the operator is a negative sign or needs to replace the previous one\n    if (formulaEndWithOperator.test(resultFormula) | resultFormula === \"\") {\n      console.log(\"multiple operators testing...\");\n      if (oper === \"-\") {\n        setInputValue(\"-\");\n        handleFormula(oper);\n        handleResultFormula(oper);\n        if (resultFormula === \"\") {\n          setResultFormula(\"0+-\");\n        }\n      } else {\n        let newDisplayFormula = displayFormula;\n        let newResultFormula = resultFormula;\n        while (formulaEndWithOperator.test(newDisplayFormula)) {\n          newDisplayFormula = newDisplayFormula.slice(0, newDisplayFormula.length - 1);\n          newResultFormula = newResultFormula.slice(0, newResultFormula.length - 1);\n        }\n        newDisplayFormula += oper;\n        newResultFormula += oper;\n        setDisplayFormula(newDisplayFormula);\n        setResultFormula(newResultFormula);\n      } \n    } else if (beginWithNegativeSign.test(nextValue)) {\n      console.log(\"testing...\");\n      const negativeSignIndex = resultFormula.indexOf(nextValue);\n      match = resultFormula[negativeSignIndex - 1];\n      newCalValue = performCal(match, newCalValue, nextValue);\n\n      if (oper === \"=\") {\n        setIsResult(true);\n        handleFormula(`=${newCalValue}`);\n        handleResultFormula(`=${newCalValue}`);\n      } else {\n        handleFormula(oper);\n        handleResultFormula(newCalValue, oper, true);\n      }  \n      setCalValue(newCalValue);\n\n    } else {\n      match = resultFormula.match(formulaHasOperator);\n      console.log(match);\n\n      if (match) {\n        newCalValue = performCal(match[1], newCalValue, nextValue);\n        // get a result\n        if (oper === \"=\") {\n          setIsResult(true);\n          handleFormula(`=${newCalValue}`);\n          handleResultFormula(`=${newCalValue}`);\n        } else {\n          handleFormula(oper);\n          handleResultFormula(newCalValue, oper, true);\n        }  \n        setCalValue(newCalValue);\n      } else {\n        newCalValue = inputValue;\n        setCalValue(newCalValue);\n        handleFormula(oper);\n        handleResultFormula(oper);\n      }\n    }    \n  }\n\n  const performCal = (oper, calValue, nextValue) => {\n    switch(oper) {\n      case \"+\": \n        calValue += nextValue;\n        break;\n      case \"-\":\n        calValue -= nextValue;\n        break;\n      case \"*\":\n        calValue *= nextValue;\n        break;\n      case \"/\":\n        calValue /= nextValue;\n        break;\n      default:\n        return calValue;\n    }\n    return calValue;\n  }\n\n  // update the input value\n  const handleInput = (event, number) => {\n    event.preventDefault();\n    let newInputValue = inputValue;\n    if (newInputValue === \"0\") {\n      newInputValue = number;\n    } else {\n      newInputValue += number;\n    }\n    handleFormula(newInputValue);\n    setInputValue(newInputValue);\n    handleResultFormula(newInputValue);\n  }\n\n  const handleDecimal = (event) => {\n    event.preventDefault();\n    let newInputValue = inputValue;\n    if (!newInputValue.includes(\".\")) {\n      handleInput(event, \".\")\n    } \n  }\n\n  // update formula with the new added numbers or operators\n  const handleFormula = (numOrOper) => {\n    let newFormula = displayFormula;\n    if (newFormula === \"0\") {\n      newFormula = numOrOper;\n    } else if (numOrOper.startsWith(\"=\")) {\n      newFormula += numOrOper;\n    } else {\n      newFormula = newFormula + numOrOper.slice(-1);\n    }\n    setDisplayFormula(newFormula);\n  }\n\n  const handleResultFormula = (numOrOper, oper = null, isCalValue = false) => {\n    let newResultFormula = resultFormula;\n    console.log(newResultFormula);\n    if (isCalValue) {\n      newResultFormula = numOrOper + oper;\n    } else if (numOrOper.startsWith(\"=\")) {\n      newResultFormula += numOrOper;\n    } else {\n      newResultFormula += numOrOper.slice(-1);\n    }\n    console.log(newResultFormula);\n    setResultFormula(newResultFormula);\n  }\n\n  const handleClearInput = () => {\n    setInputValue(\"0\");\n  } \n\n  const handleClear = (event) => {\n    event.preventDefault();\n    setDisplayFormula(\"0\");\n    setResultFormula(\"\");\n    setInputValue(\"0\");\n    setCalValue(0);\n    setIsResult(false);\n  } \n\n  return (\n    <div className=\"App\">\n      <div id=\"display\">\n        { isResult ? calValue: inputValue}\n      </div>\n      <div id=\"formula\">\n        {displayFormula}\n      </div>\n      <div>\n        <button \n          id=\"equals\" \n          onClick = {(event) => handleCalculation(event, \"=\")}\n        > \n          =\n        </button>\n      </div>\n      <div className=\"numButtons\"> \n        { numbers.map( num => \n          <button \n            id={num.id}\n            onClick = {(event) => handleInput(event, num.number)}\n          > \n            {num.number} \n          </button>)}\n      </div>\n      <div className=\"operButtons\">\n        { operators.map( oper => \n          <button \n            id={oper.id}\n            onClick={(event) => handleCalculation(event, oper.operation)}\n          >\n            {oper.operation}\n          </button>)\n        }\n      </div>\n      <div>\n        <button \n          id=\"decimal\" \n          onClick={handleDecimal}\n        >\n          .\n        </button>\n      </div>\n      <div>\n        <button id=\"clear\" onClick={handleClear}>C</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/wenjiechen/Downloads/react-projects/javascript-calculator/src/utils.js",[],"/Users/wenjiechen/Downloads/react-projects/javascript-calculator/src/index.js",[],["29","30"],{"ruleId":"31","severity":1,"message":"32","line":1,"column":27,"nodeType":"33","messageId":"34","endLine":1,"endColumn":36},{"ruleId":"35","severity":1,"message":"36","line":26,"column":36,"nodeType":"37","messageId":"38","endLine":26,"endColumn":37,"suggestions":"39"},{"ruleId":"35","severity":1,"message":"40","line":26,"column":38,"nodeType":"37","messageId":"38","endLine":26,"endColumn":39,"suggestions":"41"},{"ruleId":"35","severity":1,"message":"42","line":26,"column":40,"nodeType":"37","messageId":"38","endLine":26,"endColumn":41,"suggestions":"43"},{"ruleId":"35","severity":1,"message":"44","line":26,"column":44,"nodeType":"37","messageId":"38","endLine":26,"endColumn":45,"suggestions":"45"},{"ruleId":"35","severity":1,"message":"36","line":27,"column":36,"nodeType":"37","messageId":"38","endLine":27,"endColumn":37,"suggestions":"46"},{"ruleId":"35","severity":1,"message":"40","line":27,"column":38,"nodeType":"37","messageId":"38","endLine":27,"endColumn":39,"suggestions":"47"},{"ruleId":"35","severity":1,"message":"42","line":27,"column":40,"nodeType":"37","messageId":"38","endLine":27,"endColumn":41,"suggestions":"48"},{"ruleId":"35","severity":1,"message":"49","line":27,"column":42,"nodeType":"37","messageId":"38","endLine":27,"endColumn":43,"suggestions":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","no-useless-escape","Unnecessary escape character: \\*.","Literal","unnecessaryEscape",["55","56"],"Unnecessary escape character: \\/.",["57","58"],"Unnecessary escape character: \\+.",["59","60"],"Unnecessary escape character: \\=.",["61","62"],["63","64"],["65","66"],["67","68"],"Unnecessary escape character: \\-.",["69","70"],"no-native-reassign",["71"],"no-negated-in-lhs",["72"],{"messageId":"73","fix":"74","desc":"75"},{"messageId":"76","fix":"77","desc":"78"},{"messageId":"73","fix":"79","desc":"75"},{"messageId":"76","fix":"80","desc":"78"},{"messageId":"73","fix":"81","desc":"75"},{"messageId":"76","fix":"82","desc":"78"},{"messageId":"73","fix":"83","desc":"75"},{"messageId":"76","fix":"84","desc":"78"},{"messageId":"73","fix":"85","desc":"75"},{"messageId":"76","fix":"86","desc":"78"},{"messageId":"73","fix":"87","desc":"75"},{"messageId":"76","fix":"88","desc":"78"},{"messageId":"73","fix":"89","desc":"75"},{"messageId":"76","fix":"90","desc":"78"},{"messageId":"73","fix":"91","desc":"75"},{"messageId":"76","fix":"92","desc":"78"},"no-global-assign","no-unsafe-negation","removeEscape",{"range":"93","text":"94"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"95","text":"96"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"97","text":"94"},{"range":"98","text":"96"},{"range":"99","text":"94"},{"range":"100","text":"96"},{"range":"101","text":"94"},{"range":"102","text":"96"},{"range":"103","text":"94"},{"range":"104","text":"96"},{"range":"105","text":"94"},{"range":"106","text":"96"},{"range":"107","text":"94"},{"range":"108","text":"96"},{"range":"109","text":"94"},{"range":"110","text":"96"},[991,992],"",[991,991],"\\",[993,994],[993,993],[995,996],[995,995],[999,1000],[999,999],[1044,1045],[1044,1044],[1046,1047],[1046,1046],[1048,1049],[1048,1048],[1050,1051],[1050,1050]]