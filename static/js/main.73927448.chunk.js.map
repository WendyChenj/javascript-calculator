{"version":3,"sources":["utils.js","App.js","reportWebVitals.js","index.js"],"names":["numbers","id","number","operators","operation","App","useState","displayFormula","setDisplayFormula","resultFormula","setResultFormula","inputValue","setInputValue","calValue","setCalValue","isResult","setIsResult","beginWithNegativeSign","formulaHasOperator","formulaEndWithOperator","handleCalculation","event","oper","preventDefault","handleClearInput","nextValue","parseFloat","newCalValue","match","test","console","log","handleFormula","handleResultFormula","newDisplayFormula","newResultFormula","slice","length","negativeSignIndex","indexOf","performCal","handleInput","newInputValue","numOrOper","newFormula","startsWith","isCalValue","className","onClick","map","num","includes","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.73927448.chunk.js","sourcesContent":["export const numbers = [\n  { \n    id: \"zero\",\n    number: \"0\"\n  },\n  {\n    id: \"one\",\n    number: \"1\"\n  },\n  {\n    id: \"two\",\n    number: \"2\"\n  },\n  {\n    id: \"three\",\n    number: \"3\"\n  },\n  {\n    id: \"four\",\n    number: \"4\"\n  },\n  {\n    id: \"five\",\n    number: \"5\"\n  },\n  {\n    id: \"six\",\n    number: \"6\"\n  },\n  {\n    id: \"seven\",\n    number: \"7\"\n  },\n  {\n    id: \"eight\",\n    number: \"8\"\n  },\n  {\n    id: \"nine\",\n    number: \"9\"\n  }\n];\n\nexport const operators = [\n  {\n    id: \"add\",\n    operation: \"+\"\n  },\n  {\n    id: \"subtract\",\n    operation: \"-\"\n  },\n  {\n    id: \"multiply\",\n    operation: \"*\"\n  },\n  {\n    id: \"divide\",\n    operation: \"/\"\n  }\n];","import React, { useState } from 'react';\n\nimport { numbers, operators } from './utils';\nimport './App.css';\n\n\nfunction App() {\n\n  const [ displayFormula, setDisplayFormula ] = useState(\"0\");\n  const [ resultFormula, setResultFormula ] = useState(\"\");\n  const [ inputValue, setInputValue ] = useState(\"0\");\n  const [ calValue, setCalValue ] = useState(0);\n  const [ isResult, setIsResult ] = useState(false);\n\n  // regular expressions methods accept strings as parameters.\n\n  // quantifier: \n  // x* : matches the preceeding item x 0 or more times. [matches \\d 0 or more times]\n  // x?: matches the preceeding item 0 or 1 times. [matches \\d* 0 or 1 time]\n  // x*?: stop finding as long as it finds a match. [stop searching as long as it finds a number in \\d]\n  // (x): capturing group: matches x and remembers the match. [matches 0 or multtiple 0s]\n  // $: the end of input\n  // ^: the start of input\n\n  const beginWithNegativeSign = /^-\\d*\\.?/;\n  const formulaHasOperator = /\\d+([\\*\\/\\+\\-\\=])\\d*/;\n  const formulaEndWithOperator = /[\\*\\/\\+\\-]$/;\n\n  // perform operations\n  const handleCalculation = (event, oper) => {\n    event.preventDefault();\n    handleClearInput();\n    const nextValue = parseFloat(inputValue);\n    let newCalValue = parseFloat(calValue);\n    let match = \"\";\n\n    // if before the operator, there is a operator, check if the operator is a negative sign or needs to replace the previous one\n    if (formulaEndWithOperator.test(resultFormula) | resultFormula === \"\") {\n      console.log(\"multiple operators testing...\");\n      if (oper === \"-\") {\n        setInputValue(\"-\");\n        handleFormula(oper);\n        handleResultFormula(oper);\n        if (resultFormula === \"\") {\n          setResultFormula(\"0+-\");\n        }\n      } else {\n        let newDisplayFormula = displayFormula;\n        let newResultFormula = resultFormula;\n        while (formulaEndWithOperator.test(newDisplayFormula)) {\n          newDisplayFormula = newDisplayFormula.slice(0, newDisplayFormula.length - 1);\n          newResultFormula = newResultFormula.slice(0, newResultFormula.length - 1);\n        }\n        newDisplayFormula += oper;\n        newResultFormula += oper;\n        setDisplayFormula(newDisplayFormula);\n        setResultFormula(newResultFormula);\n      } \n    } else if (beginWithNegativeSign.test(nextValue)) {\n      console.log(\"testing...\");\n      const negativeSignIndex = resultFormula.indexOf(nextValue);\n      match = resultFormula[negativeSignIndex - 1];\n      newCalValue = performCal(match, newCalValue, nextValue);\n\n      if (oper === \"=\") {\n        setIsResult(true);\n        handleFormula(`=${newCalValue}`);\n        handleResultFormula(`=${newCalValue}`);\n      } else {\n        handleFormula(oper);\n        handleResultFormula(newCalValue, oper, true);\n      }  \n      setCalValue(newCalValue);\n\n    } else {\n      match = resultFormula.match(formulaHasOperator);\n      console.log(match);\n\n      if (match) {\n        newCalValue = performCal(match[1], newCalValue, nextValue);\n        // get a result\n        if (oper === \"=\") {\n          setIsResult(true);\n          handleFormula(`=${newCalValue}`);\n          handleResultFormula(`=${newCalValue}`);\n        } else {\n          handleFormula(oper);\n          handleResultFormula(newCalValue, oper, true);\n        }  \n        setCalValue(newCalValue);\n      } else {\n        newCalValue = inputValue;\n        setCalValue(newCalValue);\n        handleFormula(oper);\n        handleResultFormula(oper);\n      }\n    }    \n  }\n\n  const performCal = (oper, calValue, nextValue) => {\n    switch(oper) {\n      case \"+\": \n        calValue += nextValue;\n        break;\n      case \"-\":\n        calValue -= nextValue;\n        break;\n      case \"*\":\n        calValue *= nextValue;\n        break;\n      case \"/\":\n        calValue /= nextValue;\n        break;\n      default:\n        return calValue;\n    }\n    return calValue;\n  }\n\n  // update the input value\n  const handleInput = (event, number) => {\n    event.preventDefault();\n    let newInputValue = inputValue;\n    if (newInputValue === \"0\") {\n      newInputValue = number;\n    } else {\n      newInputValue += number;\n    }\n    handleFormula(newInputValue);\n    setInputValue(newInputValue);\n    handleResultFormula(newInputValue);\n  }\n\n  const handleDecimal = (event) => {\n    event.preventDefault();\n    let newInputValue = inputValue;\n    if (!newInputValue.includes(\".\")) {\n      handleInput(event, \".\")\n    } \n  }\n\n  // update formula with the new added numbers or operators\n  const handleFormula = (numOrOper) => {\n    let newFormula = displayFormula;\n    if (newFormula === \"0\") {\n      newFormula = numOrOper;\n    } else if (numOrOper.startsWith(\"=\")) {\n      newFormula += numOrOper;\n    } else {\n      newFormula = newFormula + numOrOper.slice(-1);\n    }\n    setDisplayFormula(newFormula);\n  }\n\n  const handleResultFormula = (numOrOper, oper = null, isCalValue = false) => {\n    let newResultFormula = resultFormula;\n    console.log(newResultFormula);\n    if (isCalValue) {\n      newResultFormula = numOrOper + oper;\n    } else if (numOrOper.startsWith(\"=\")) {\n      newResultFormula += numOrOper;\n    } else {\n      newResultFormula += numOrOper.slice(-1);\n    }\n    console.log(newResultFormula);\n    setResultFormula(newResultFormula);\n  }\n\n  const handleClearInput = () => {\n    setInputValue(\"0\");\n  } \n\n  const handleClear = (event) => {\n    event.preventDefault();\n    setDisplayFormula(\"0\");\n    setResultFormula(\"\");\n    setInputValue(\"0\");\n    setCalValue(0);\n    setIsResult(false);\n  } \n\n  return (\n    <div className=\"App\">\n\n      <div id=\"formula\">\n        {displayFormula}\n      </div>\n      <div id=\"display\">\n        { isResult ? calValue: inputValue}\n      </div>\n\n      <div className=\"buttonWrapper\">\n        <button \n          id=\"clear\" \n          onClick={handleClear}\n        >\n          C\n        </button>\n\n        <button \n          id=\"equals\" \n          onClick = {(event) => handleCalculation(event, \"=\")}\n        > \n          =\n        </button>\n      \n        { numbers.map( num => \n          <button \n            id={num.id}\n            onClick = {(event) => handleInput(event, num.number)}\n          > \n            {num.number} \n          </button> )\n        }\n\n\n        { operators.map( oper => \n          <button \n            id={oper.id}\n            onClick={(event) => handleCalculation(event, oper.operation)}\n          >\n            {oper.operation}\n          </button>)\n        }\n\n        <button \n          id=\"decimal\" \n          onClick={handleDecimal}\n        >\n          .\n        </button>\n      \n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}